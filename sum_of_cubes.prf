(sum_of_cubes
 (sum_cubes_TCC1 0
  (sum_cubes_TCC1-1 nil 3950019519 ("" (subtype-tcc) nil nil) nil nil
   (sum_cubes subtype "(number_fields.-)(sum_of_cubes.n, 1)" "nat")))
 (sum_cubes_TCC2 0
  (sum_cubes_TCC2-1 nil 3950019519 ("" (termination-tcc) nil nil) nil
   nil
   (sum_cubes termination
    "sum_of_cubes.sum_cubes((number_fields.-)(sum_of_cubes.n, 1))"
    "nil")))
 (closed_form_TCC1 0
  (closed_form_TCC1-1 nil 3950019519 ("" (subtype-tcc) nil nil) nil nil
   (closed_form subtype
    "number_fields./((number_fields.*(exponentiation.expt(sum_of_cubes.n, 2), exponentiation.expt((number_fields.+)(sum_of_cubes.n, 1), 2))), 4)"
    "nat")))
 (sum_cubes_theorem 0
  (sum_cubes_theorem-1 nil 3950019519
   ("" (induct n)
    (("1" (expand "sum_cubes")
      (("1" (expand "closed_form") (("1" (grind) nil nil)) nil)) nil)
     ("2" (grind) nil nil))
    nil)
   ((even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (expt def-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (closed_form const-decl "nat" sum_of_cubes nil)
    (sum_cubes def-decl "nat" sum_of_cubes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

