(sum_of_k_times_2_to_k_minus_1
 (sum_expr_TCC1 0
  (sum_expr_TCC1-1 nil 3950019826 ("" (subtype-tcc) nil nil) nil nil
   (sum_expr subtype
    "(number_fields.-)(sum_of_k_times_2_to_k_minus_1.n, 1)" "nat")))
 (sum_expr_TCC2 0
  (sum_expr_TCC2-1 nil 3950019826 ("" (termination-tcc) nil nil) nil
   nil
   (sum_expr termination
    "sum_of_k_times_2_to_k_minus_1.sum_expr((number_fields.-)(sum_of_k_times_2_to_k_minus_1.n, 1))"
    "nil")))
 (sum_theorem 0
  (sum_theorem-1 nil 3950019830
   ("" (induct n) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (expt def-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (closed_form const-decl "real" sum_of_k_times_2_to_k_minus_1 nil)
    (sum_expr def-decl "real" sum_of_k_times_2_to_k_minus_1 nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

